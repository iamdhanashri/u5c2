1. Create an index on the user_id field in the sales collection to improve the performance of your queries.

db.sales.createIndex({ user_id: 1 })

-------------------------------------------------------------


2. Use the $lookup operator in an aggregation pipeline to join the vendors and sales collections, and return a new documents that contains the name and city of each vendor, along with their sales. The output should look like this:

db.vendors.aggregate([ { $lookup: { from: "sales", localField: "_id", foreignField: "user_id", as: "sales" } }, { $project: { name: 1, city: 1, sales: { _id: 1, item: 1, profit: 1 } } }])

--------------------------------------------------------------

3. Use the $group operator in an aggregation pipeline to calculate the total number of sales and total profit for each user. The output should look like this:

db.sales.aggregate([ { $group: { _id: "$user_id", total_sales: { $sum: 1 }, total_profit: { $sum: "$profit" } } }, { $lookup: { from: "vendors", localField: "_id", foreignField: "_id", as: "vendor" } }, { $unwind: "$vendor" }, { $project: { name: "$vendor.name", total_sales: 1, total_profit: 1 } },{$sort:{_id:1}} ])


-----------------------------------------------


4. Use the $sort operator to sort the output documents by total profit in decreasing order. The output should look like this


db.sales.aggregate([ { $group: { _id: "$user_id", total_sales: { $sum: 1 }, total_profit: { $sum: "$profit" } } }, { $lookup: { from: "vendors", localField: "_id", foreignField: "_id", as: "vendor" } }, { $unwind: "$vendor" }, { $project: { name: "$vendor.name", total_sales: 1, total_profit: 1 } }, { $sort: { total_profit: -1 } }])

------------------------------------------------------------------


5. Cross check the total_sales and total_profit, if it is correct, by adding more sales in the sales collection and running your aggregation pipeline again.



---------------------------------------------